use sdl2::pixels::Color;
use sdl2::pixels::Palette;

const fn c(value: u8) -> Color {
	Color { r: value, g: value, b: value, a: 255 }
}

/// Color values for a palette to draw 8-bit grayscale data.
pub const GRAYSCALE_PALETTE: [Color; 256] = [
	c(0x00), c(0x01), c(0x02), c(0x03), c(0x04), c(0x05), c(0x06), c(0x07), c(0x08), c(0x09), c(0x0a), c(0x0b), c(0x0c), c(0x0d), c(0x0e), c(0x0f),
	c(0x10), c(0x11), c(0x12), c(0x13), c(0x14), c(0x15), c(0x16), c(0x17), c(0x18), c(0x19), c(0x1a), c(0x1b), c(0x1c), c(0x1d), c(0x1e), c(0x1f),
	c(0x20), c(0x21), c(0x22), c(0x23), c(0x24), c(0x25), c(0x26), c(0x27), c(0x28), c(0x29), c(0x2a), c(0x2b), c(0x2c), c(0x2d), c(0x2e), c(0x2f),
	c(0x30), c(0x31), c(0x32), c(0x33), c(0x34), c(0x35), c(0x36), c(0x37), c(0x38), c(0x39), c(0x3a), c(0x3b), c(0x3c), c(0x3d), c(0x3e), c(0x3f),
	c(0x40), c(0x41), c(0x42), c(0x43), c(0x44), c(0x45), c(0x46), c(0x47), c(0x48), c(0x49), c(0x4a), c(0x4b), c(0x4c), c(0x4d), c(0x4e), c(0x4f),
	c(0x50), c(0x51), c(0x52), c(0x53), c(0x54), c(0x55), c(0x56), c(0x57), c(0x58), c(0x59), c(0x5a), c(0x5b), c(0x5c), c(0x5d), c(0x5e), c(0x5f),
	c(0x60), c(0x61), c(0x62), c(0x63), c(0x64), c(0x65), c(0x66), c(0x67), c(0x68), c(0x69), c(0x6a), c(0x6b), c(0x6c), c(0x6d), c(0x6e), c(0x6f),
	c(0x70), c(0x71), c(0x72), c(0x73), c(0x74), c(0x75), c(0x76), c(0x77), c(0x78), c(0x79), c(0x7a), c(0x7b), c(0x7c), c(0x7d), c(0x7e), c(0x7f),
	c(0x80), c(0x81), c(0x82), c(0x83), c(0x84), c(0x85), c(0x86), c(0x87), c(0x88), c(0x89), c(0x8a), c(0x8b), c(0x8c), c(0x8d), c(0x8e), c(0x8f),
	c(0x90), c(0x91), c(0x92), c(0x93), c(0x94), c(0x95), c(0x96), c(0x97), c(0x98), c(0x99), c(0x9a), c(0x9b), c(0x9c), c(0x9d), c(0x9e), c(0x9f),
	c(0xa0), c(0xa1), c(0xa2), c(0xa3), c(0xa4), c(0xa5), c(0xa6), c(0xa7), c(0xa8), c(0xa9), c(0xaa), c(0xab), c(0xac), c(0xad), c(0xae), c(0xaf),
	c(0xb0), c(0xb1), c(0xb2), c(0xb3), c(0xb4), c(0xb5), c(0xb6), c(0xb7), c(0xb8), c(0xb9), c(0xba), c(0xbb), c(0xbc), c(0xbd), c(0xbe), c(0xbf),
	c(0xc0), c(0xc1), c(0xc2), c(0xc3), c(0xc4), c(0xc5), c(0xc6), c(0xc7), c(0xc8), c(0xc9), c(0xca), c(0xcb), c(0xcc), c(0xcd), c(0xce), c(0xcf),
	c(0xd0), c(0xd1), c(0xd2), c(0xd3), c(0xd4), c(0xd5), c(0xd6), c(0xd7), c(0xd8), c(0xd9), c(0xda), c(0xdb), c(0xdc), c(0xdd), c(0xde), c(0xdf),
	c(0xe0), c(0xe1), c(0xe2), c(0xe3), c(0xe4), c(0xe5), c(0xe6), c(0xe7), c(0xe8), c(0xe9), c(0xea), c(0xeb), c(0xec), c(0xed), c(0xee), c(0xef),
	c(0xf0), c(0xf1), c(0xf2), c(0xf3), c(0xf4), c(0xf5), c(0xf6), c(0xf7), c(0xf8), c(0xf9), c(0xfa), c(0xfb), c(0xfc), c(0xfd), c(0xfe), c(0xff),
];

/// Create a palette useable to draw 8-bit grayscale data.
pub fn grayscale_palette() -> Result<Palette, String> {
	Palette::with_colors(&GRAYSCALE_PALETTE[..])
}
